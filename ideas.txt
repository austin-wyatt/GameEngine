There are 5 characters to choose from at the beginning. The character you choose becomes your main character.
The other characters are available to add to your party later. 


like maybe equipment gives you an ability from a random skill tree that can be used without assigning a slot
and the level of the ability on the skill tree would be tied to the rarity of the equipment
and if you use the equipment long enough you can learn that ability on the skill tree without having to learn all the nodes before it
(visual idea regarding that: the branches under the node look withered and the branches above the node fill more slowly than normal (assuming the skills below the equipment skill haven't been learned, "unstable foundation" debuff))





Emulate isaac's progression feeling (have meaningful upgrades after every iteration of the gameplay loop)

Make the menu screen the town that the player builds. The options menu can be a building, etc.

Spellcasting like d&d. Require spell slots to cast spells. Speccing into magic trees grants more spell slots


Class trees: Fighter, archer, rogue, paladin/priest, wizard, druid, necromancer, leader (buffs team), lone wolf (gets bonuses for being solo), spatial magic


FabinhoSC for art

Idea blurb:
"I've got a mechanic to run by you that I think would be really cool. So basically my idea is that the map is extremely large (procedurally generated by me but the seed never changes for players so the first 'cell' out of the starting area would never change, etc). Large as in like 100k by 100k cells. But a player would never have to interact with this map directly as notable locations would be marked for direct travel
But a player could also choose to explore these cells manually. In these "wilderness" cells as I'm calling them in my notes there would be loot appropriate for the area and occasionally rarer cell archetypes that contain valuable stuff or tougher enemies and etc
and skills would exist to help guide players to cells with a higher 'value'
then there would also be hand placed cells that contain truly gamebreaking loot
but unless you knew where they were or had a high tier of the treasure finding skill you'd never find them
or if you were really lucky
But then also all "landmarks" (ie quest locations, dungeons, etc) would exist in their cell regardless of whether they were marked or not
so a player that knew where to go could essentially do a morrowind style speedrun and face the end game dungeons if they could just navigate there
all of these mechanics together would do, in my opinion, a lot of good things for the game
first: increase time spent on first playthrough exploring for high value cells and noting their location
second: increases replayability on subsequent playthroughs because you know where to get good loot or where to go to focus a certain build
third: if theres a community it would increase engagement there because people would want to find the easiest way to break the game
and then fourth: speedruns would be fuckin crazy with people finding like outlier cells that have way crazier loot than they should"

Technical notes about large map:
initial guesstimate of size: 47.4 million points (6884 cells x 6884 cells)
initial guesstimate of average value node coverage: 803 cells
range of nodes on value map: 50,000 - 200,000
value map node cost: 12 bytes
value map storage cost: 2.4 megabytes (ie more features can be added to the value map AND the value map can be kept loaded in memory)

A master seed will be used to generate a 

Generate features separate to the actual cells and determine what should be in any given cell based on the map features. If a necromancer is in a cell, spawn skeletons in surrounding cells and make them denser the closer to the necromancer they are.
Features like rivers, mountains, forests, etc will be consistent between cells. A river that goes from east to west in one cell should start in the same place the next cell over
The value of a cell should be immediately apparent upon entering (based on the level of the scouting ability). Depending on the value of the cell, the character with scouting will have dialogue along the lines of "Hmm, doesn't seem like there's anything nearby" or "We seem to be getting close to something"
To make things less annoying, resources can be spent to "expedition" to a point on the map. The distance away from explored wilderness that can be expeditioned to is based on the resources spent. Different levels of scouting allow for approximate 

feature generation equation: must be able to return what features are in a cell and where in the cell that feature should be.
Feature map should be saved as a list of points and parameters. A river might go from point (50090, 0) to (39489, 10) and have a width of 50. The map creator would be able to see that their cell intersects with this river and populate the feature accordingly

When entering a cell a popup should appear. The popup will have the party scout's evaluation of the value of the cell and whether or not a combat will be required to explore the cell. Then the option to forge ahead (and in which direction) or explore the cell will be given (assuming combat wasn't forced)
The option to forge ahead will show an approximate value for what lies in the general direction based on the scout's ability. The grids checked will be a fan out from the edge of the cell with a size based on the scout's ability. 

The value map will be a list of points (short x, short y. center of the radius), area of influence (char r, how many squares in a radius should be affected), (short t, type of value. Could be items, a supply cache, etc), (char falloff_multiplier, how much the value of a given cell tapers as it moves away from the center. Different types of value cells will have different effects based on what "level" of fallof they're at [a camp center tile might have cut trees in a radius from the center and cleared out wildlife on the farther outskirts etc]), (short center_x, short center_y. The value center. This is where the cell with the highest value lies and all tapering is calculated from this point. This point will lie within the circle defined by the radius), 
overlapping value circles will combine in value. The higher initial value will determine the final loot type (value types will have "value fillers" that are scattered throughout a cell to fill out excess value).
Value map will contain all combats as well as all treasures

The feature map will be split across different files to simplify storage. Features will encompass everything necessary for map generation. Different features will have different parameters associated with them and features will be what is used to style the overworld map (such as coloring whats a forest, where a river is, filling in a mountain range, etc).

When entering a cell that has an associated quest, a popup will be generated informing the user of the quest and put it in their quest log. Chain quests cells will only appear once the prerequisite chains have been unlocked.

Shadow of war style map clearing (permanent changes)

Find and liberate cities, etc

Story is to find an item and interact with. If found too fast an alternate story quest will activate.

Enchantment skill tree. By spending resources you can attach a weakened version of an ability to an item. At level 1 they would be extremely weak (5% effectiveness, 1 turn duration on all multi turn effects, etc) but there would never be a limit on how many enchanted items were able to be used.

Action economy is controlled by an energy system. Characters would start with 10 energy. Moving 1 tile would cost 1 energy and using an average ability would cost 5 (stronger or weaker could cost less). Using an enchanted item's ability would cost 1 always.

Physical damage mitigation is via "shields" that are provided passively when taking certain abilities. Physical abilities would remove a certain amount of shields when used (innately and dependent on their type)

Day/night cycle

Skills can only be changed at safe havens/"church" type areas

Create a fog effect that floats over the ground to signify fog 